function makeSpectrogram(path)

% DOCUMENTATION TABLE OF CONTENTS
% I. SYNTAX
% II. OVERVIEW
% III. REQUIREMENTS
% IV. INPUTS
% V. OUTPUTS

%% 
% I. SYNTAX
% makeSpectrogram(path)


% II. OVERVIEW
% This function creates and properly formats a periodogram (frequency vs.
% power)and a spectrogram (frequency vs. time, with power in color) for an
% audio recording. Originally intended for use with recordings of
% band-limited noise generated by get_speaker_spectrogram.m.


% III. REQUIREMENTS
% This function has no hardware or software dependencies beyond those
% necessary for running MATLAB, but see INPUTS below for input formatting
% requirements.


% IV. INPUTS
% path - path to a .mat file containing a audio recording data and
% metadata. The file should define a structure called `Recording` with the
% following fields:

%   Recording.Data % 1 x t vector of audio recording data, where t is the number of time samples in the recording
%   Recording.PreStimDuration.val % duration of any recording period before stimulus onset, in seconds
%   Recording.PreStimDuration.val % duration of any recording period after stimulus offset, in seconds
%   Recording.TrueSampleRate.val % sample rate of audio recording, in samples per second
%   Recording.StimDur.val % duration of stimulus to analyze, in seconds
%   Recording.StimMinFreq.val % minimum stimulus frequency, in Hz (labeling purposes only)
%   Recording.StimMaxFreq.val % maximum stimulus frequency, in Hz (labeling purposes only)
%   Recording.Speaker % string specifying model number of speaker used to generate stimulus (labeling purposes only)
%   Recording.Microphone % string specifying model number of microphone used to record stimulus (labeling purposes only)
%   Recording.SignalConditioner % string specifying model number of signal conditioner used to record stimulus (labeling purposes only)
%   

%% Load data and metadata from secondary storage:
load(path);
preStimDur = Recording.PostStimDuration.val;
postStimDur = Recording.PostStimDuration.val;
trueSampleRate = Recording.TrueSampleRate.val;
stimDur = Recording.StimDur.val;
stimMinFreq = Recording.StimMinFreq.val;
stimMaxFreq = Recording.StimMaxFreq.val;
stimData = Recording.Data(ceil(preStimDur*trueSampleRate):length(Recording.Data) - ceil(postStimDur * trueSampleRate));

%% Get RMS power of signal from stimulus
stimRMS = rms(stimData);


%% Perform spectral analysis

n = length(stimData);
dft = fft(stimData); % Calculate fft
%power = abs(dft).^2 / (n*trueSampleRate); % compute power of dft
power = abs(dft).^2 / n; % compute power of dft

% convert 2-sided power spectrum to single-sided power spectrum
power = power(1:n/2+1); 
power(2:end-1) = 2*power(2:end-1);

% define frequencies to plot
frequencyStep = trueSampleRate/n;
frequencyRange = frequencyStep * (0:n/2); 

figure;
plot(frequencyRange, 10*log10(power));
%plot(frequencyRange, power);
grid on


%{
speakerName = speakers{spkrInd}{1};
micName = mics{micInd}{1};
scName = signalConditioners{scInd}{1};
%}
% titleStr = strcat(['Frequency components of ', Session.speakerName, ', ', num2str(stimMinFreq),'-',num2str(stimMaxFreq), ' Hz white noise' ]);

%{
titleStr = {strcat([num2str(floor(stimMinFreq/1000)), '-', num2str(floor(stimMaxFreq/1000)), ' kHz noise']);
            strcat(['acquired from speaker ', Recording.Speaker, ' ', Recording.Date]);
            strcat(['Mic: ', Recording.Microphone]);
            strcat(['Signal Conditioner: ', Recording.SignalConditioner, ', Gain: x', num2str(Recording.sigCondGain)]);
            };
title(titleStr);
%}

%{
legendStr = strcat([micName, ' with ', scName]);
legend(legendStr);
%}


%% Plot spectrogram:
%WARNING: Calling spectrogram on hs05bruno ('') has raises errors related to memory issues.
figure;
hold on;
spectrogram(Recording.Data, 128, 120, [], 'yaxis');
%titleStr2 = strcat(['Spectrogram of ', speakerName, ', ', num2str(stimMinFreq),'-',num2str(stimMaxFreq), ' Hz white noise' ]);
%title(titleStr);


disp('Done');